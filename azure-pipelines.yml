trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - content-web/app.js

pool:
  vmImage: ubuntu-latest
stages:
  - stage: build
    jobs:
    - job: 'BuildAndPublish'
      displayName: 'Build and Publish'
      steps:
        - checkout: self
        - task: DockerCompose@0
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'GitHub Container Registry'
            dockerComposeFile: '**/docker-compose.yml'
            additionalDockerComposeFiles: 'build.docker-compose.yml'
            action: 'Build services'
            additionalImageTags: '$(Build.BuildNumber)'
        - task: DockerCompose@0
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'GitHub Container Registry'
            dockerComposeFile: '**/docker-compose.yml'
            additionalDockerComposeFiles: 'build.docker-compose.yml'
            action: 'Push services'
            additionalImageTags: '$(Build.BuildNumber)'
  - stage: DeployProd
    dependsOn: build
    jobs:
    - deployment: infrastructure
      environment: production
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: AzureCLI@2
                inputs:
                  workingDirectory: infrastructure
                  azureSubscription: 'Fabrikam-Azure'
                  scriptType: 'pscore'
                  scriptLocation: 'scriptPath'
                  scriptPath: './infrastructure/automate.ps1'
                env:
                  CR_PAT: $(CR_PAT)
  - stage: PopulateDB
    dependsOn: DeployProd
    jobs:
    - job: 'getConnectionString'
      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: 'Fabrikam-Azure'
            scriptLocation: 'inlineScript'
            scriptType: pscore
            inlineScript: |
              $dbKeys = az cosmosdb keys list -n "fabmedical-cdb-add" -g "fabmedical-rg-add" --type connection-strings `
                --query "connectionStrings[?description=='Primary MongoDB Connection String'].connectionString"
              $manipulate = $dbKeys
              $manipulate = $manipulate.Split("""")[1]
              $manipulate = $manipulate.Split("?")
              $databaseString = $manipulate[0] + "contentdb?" + $manipulate[1]
              ##vso[task.setvariable variable=mongoDBConnection;isOutput=true]$databaseString              
    - job: 'dockerPopulateDB'
      dependsOn: 'getConnectionString'
      variables:
        mongoConnection: $[ dependencies.getConnectionString.ouputs['mongoDBConnection'] ]
      steps:
        - task: Docker@0
          inputs:
            containerregistrytype: 'Azure Container Registry'
            action: Run a Docker command
            customCommand: docker run -ti -e MONGODB_CONNECTION=$mongoConnection ghcr.io/adunn-insight/fabrikam-init